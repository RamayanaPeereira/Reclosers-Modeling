function contador(block)

%MSFUNTMPL_BASIC A Template for a Level-2 MATLAB S-Function
%   The MATLAB S-function is written as a MATLAB function with the
%   same name as the S-function. Replace 'msfuntmpl_basic' with the
%   name of your S-function.
%
%   It should be noted that the MATLAB S-function is very similar
%   to Level-2 C-Mex S-functions. You should be able to get more
%   information for each of the block methods by referring to the
%   documentation for C-Mex S-functions.
%
%   Copyright 2003-2010 The MathWorks, Inc.

%%
%% The setup method is used to set up the basic attributes of the
%% S-function such as ports, parameters, etc. Do not add any other
%% calls to the main body of the function.
%%
setup(block);

%endfunction

%% Function: setup ===================================================
%% Abstract:
%%   Set up the basic characteristics of the S-function block such as:
%%   - Input ports
%%   - Output ports
%%   - Dialog parameters
%%   - Options
%%
%%   Required         : Yes
%%   C-Mex counterpart: mdlInitializeSizes
%%
function setup(block)
%% Register number of dialog parameters
%block.NumDialogPrms = 8;

% Register number of ports
block.NumInputPorts  = 2;
block.NumOutputPorts = 2;

block.InputPort(1).SamplingMode = 'Sample';
block.InputPort(2).SamplingMode = 'Sample';
block.OutputPort(1).SamplingMode = 'Sample';
block.OutputPort(2).SamplingMode = 'Sample';

block.SampleTimes = [1/960 0];
block.SimStateCompliance = 'DefaultSimState';


block.RegBlockMethod('PostPropagationSetup',    @DoPostPropSetup);
block.RegBlockMethod('InitializeConditions', @InitializeConditions);
block.RegBlockMethod('Start', @Start);
block.RegBlockMethod('Outputs', @Outputs);     
block.RegBlockMethod('Update', @Update);
block.RegBlockMethod('Derivatives', @Derivatives);
block.RegBlockMethod('Terminate', @Terminate); 

function DoPostPropSetup(block)
block.NumDworks = 1;

block.Dwork(1).Name            = 'trip_rele';
block.Dwork(1).Dimensions      = 1;
block.Dwork(1).DatatypeID      = 0;      
block.Dwork(1).Complexity      = 'Real'; 
block.Dwork(1).UsedAsDiscState = true;

block.NumDworks = 2;

block.Dwork(2).Name            = 'tempo';
block.Dwork(2).Dimensions      = 1;
block.Dwork(2).DatatypeID      = 0;      
block.Dwork(2).Complexity      = 'Real'; 
block.Dwork(2).UsedAsDiscState = true;

block.NumDworks = 3;

block.Dwork(3).Name            = 'trip_relig';
block.Dwork(3).Dimensions      = 1;
block.Dwork(3).DatatypeID      = 0;      
block.Dwork(3).Complexity      = 'Real'; 
block.Dwork(3).UsedAsDiscState = true;

block.NumDworks = 4;

block.Dwork(4).Name            = 'tempo_out';
block.Dwork(4).Dimensions      = 1;
block.Dwork(4).DatatypeID      = 0;      
block.Dwork(4).Complexity      = 'Real'; 
block.Dwork(4).UsedAsDiscState = true;

function InitializeConditions(block)
function Start(block)
function Outputs(block)

block.OutputPort(1).Data =block.Dwork(3).Data ;
block.OutputPort(2).Data = block.Dwork(4).Data ;
function Update(block)

 block.Dwork(1).Data=block.InputPort(1).Data;

 if  block.Dwork(1).Data >0%== 1
      block.Dwork(3).Data = 1;
     block.Dwork(4).Data = block.Dwork(4).Data+1/960;
 else
     block.Dwork(3).Data = 0;
     block.Dwork(4).Data = 0;     
 end
    if block.Dwork(4).Data > 0.25 
     block.Dwork(3).Data = 0;
    end
function Derivatives(block)
function Terminate(block)






